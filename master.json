// master.json - AI agent configuration for software development workflow
//
// WHY THIS WORKS:
// This configuration defines a complete iterative development process that mirrors
// how experienced engineers actually solve problems. It combines multiple proven
// methodologies: SOLID principles for code structure, scientific method for
// hypothesis testing, adversarial review for finding blind spots, and Strunk & White
// for clear communication.
//
// The workflow is deliberately cyclical: thought→action→execute→observe→reflect→decide.
// Each cycle improves quality until convergence (target - actual < epsilon).
//
// MULTI-LLM COMPATIBILITY:
// Different LLMs have different strengths. Temperature diversity (0.1, 0.5, 0.9)
// means we can use conservative models for security, balanced models for implementation,
// and creative models for ideation. This config provides enough context that any
// compliant LLM can understand what's expected at each phase.
//
// KEY CONCEPTS:
// - "convergence": Solution quality improving with each iteration until delta < epsilon
// - "adversarial review": Examining solution from hostile/skeptical perspectives
// - "principles": Codified rules that trigger when specific patterns detected
// - "gate": Quality checkpoint that must pass before proceeding

{
  "version": "521.1.0",
  "updated": "2025-10-18T12:42:52Z",
  "owner": "anon987654321",
  "repo": "anon987654321/pub3",

  // ENFORCE PER-MESSAGE PIPELINE (codified from chat)
  "on_every_message": [
    "show_version",
    "detect_current_stage",
    "load_personas",
    "execute_workflow",
    "enforce_principles",
    "prefer_unified_diff_output"
  ],

  // WORKFLOW PHASES run in sequence and loop until convergence
  "phases": [
    "thought", // Understand the problem deeply
    "brainstorm", // Generate diverse alternatives without judgment
    "ideate", // Explore creative solutions beyond obvious
    "cherrypick", // Select best ideas from brainstorm and ideation
    "action", // Plan implementation
    "execute", // Implement the plan
    "observe", // Measure results and detect violations
    "reflect", // Extract learnings and patterns
    "decide" // Check convergence or iterate
  ],

  // MULTI-LLM TEMPERATURE ROLES (explicit)
  "temperatures": [0.1, 0.5, 0.9],
  "temperature_roles": {
    "0.1": "security, compliance, standards",
    "0.5": "implementation, refactoring",
    "0.9": "ideation, alternatives, edge_cases"
  },

  "questions_thought": [
    "What problem exists?",
    "What evidence proves it?",
    "What if we do nothing?"
  ],
  "questions_brainstorm": [
    "What are 5-20 different approaches?",
    "What's the opposite of obvious?", // Inversion thinking
    "What would a beginner try?",
    "What would cost 10x more?",
    "What would cost 10x less?"
  ],
  "questions_ideate": [
    "What if we removed a constraint?", // Question assumptions
    "What patterns from other domains apply?", // Cross-pollination
    "What's the most elegant solution?",
    "What's the most pragmatic solution?"
  ],
  "questions_cherrypick": [
    "Which solutions are simplest?",
    "Which solutions are most reversible?", // Minimize risk
    "Which solutions compose well?",
    "What does evidence suggest?" // Data over intuition
  ],
  "questions_action": [
    "What are the concrete steps?",
    "What decisions are irreversible?",
    "What can we test first?" // Minimize blast radius
  ],
  "questions_observe": [
    "What principles violated?",
    "What breaks under stress?",
    "What's the actual quality?"
  ],
  "questions_reflect": [
    "What worked?",
    "What failed?",
    "What patterns emerged?",
    "What should we codify?" // Update principles if needed
  ],

  // RUNTIME SETUP AND SAFEGUARDS (from chat governance)
  "execute_on_load": {
    "step_00a_establish_session": {
      "datetime_anchor": "user provides YYYY-MM-DD HH:MM:SS UTC at session start",
      "user_login": "user provides login identifier",
      "use_throughout": "ISO 8601 timestamps derived from anchor (YYYY-MM-DDTHH:MM:SSZ)"
    },
    "step_00b_integrity_check": {
      "calculate": "SHA256 of master.json excluding integrity_hash",
      "compare_to": "integrity_hash field",
      "action_if_mismatch": "alert user; file modified outside governance approval",
      "skip_if": "first load or approved version upgrade"
    },
    "step_00c_ask_verbosity": {
      "question": "full_verbosity or token_saving?",
      "default_if_no_response": "token_saving",
      "note": "token_saving hides output, does not skip work"
    },
    "step_00d_output_mode": {
      "prefer_unified_diff_output": true,
      "diff_only_when_modifying": true,
      "no_prose_explanations": true
    }
  },

  // CONVERGENCE CRITERIA
  // Epsilon prevents infinite loops from asymptotic improvement
  "target": 0.99, // Quality score 0.0 to 1.0
  "epsilon": 0.001, // Minimum improvement delta
  "max_iterations": 50, // Circuit breaker

  // RUBY LANGUAGE - Modern idioms from 3.3+
  "ruby_version": "3.3+",
  "ruby_frozen_string_literal": true, // Immutability by default
  "ruby_prefer": [
    "yield over block parameter",
    "symbols over strings for hash keys",
    "enumerables over loops",
    "pattern matching over conditionals",
    "Data.define for value objects"
  ],
  "ruby_forbidden": [
    "for loops",
    "rescue Exception without specific type", // Catches SystemExit
    "class variables @@", // Shared mutable state
    "and/or keywords use && || instead" // Precedence gotchas
  ],

  // ZSH SHELL - Modern scripting with safety
  "zsh_version": "5.9+",
  "zsh_strict": "set -euo pipefail", // Exit on error, undefined vars, pipe failures
  "zsh_prefer": [
    "[[ ]] conditionals",
    "typeset for variables",
    "printf over echo",
    "${variable//search/replace}",
    "glob qualifiers"
  ],
  "zsh_forbidden": [
    "bashisms",
    "backticks use $() instead",
    "which", // Not portable use type
    "test use [[ ]] instead",
    "seq", // Use {1..10}
    "echo for output",
    "sed", "awk", "head", "tail",
    "find", "wc", "tr", "cut"
  ],

  "stack": [
    "rails 8.1+",
    "postgresql 16+",
    "openbsd 7.7+"
  ],
  "forbidden_stack": ["python", "bash", "sh", "docker", "redis"],

  // QUALITY DIMENSIONS weighted 1-10 for convergence calculation
  "weight_security": 10, // Vulnerabilities never acceptable
  "weight_duplication": 10, // DRY violations compound
  "weight_complexity": 9,
  "weight_coverage": 8,

  // QUALITY GATES block progression until all pass
  "gate_commit": ["valid syntax", "passing tests", "no secrets"],
  "gate_deploy": ["commit gates pass", "coverage >= 0.90", "vulnerabilities = 0"],
  // Expand commit gates for repeatability (from chat)
  "gates": {
    "commit": [
      "valid syntax",
      "passing tests",
      "rubocop zero offenses",
      "no secrets (password|api[_-]?key|secret|token|bearer)",
      "no forbidden technologies: python bash sh docker redis",
      "no forbidden shell builtins: sed awk head tail find wc tr cut"
    ],
    "deploy": [
      "all commit gates pass",
      "coverage >= 0.90 (line and branch)",
      "security scan: zero high/critical"
    ]
  },

  // ADVERSARIAL REVIEW perspectives to find blind spots
  "adversarial": [
    "skeptic", // Questions if we should build
    "minimalist", // Removes everything non-essential
    "security_auditor", // Assumes malicious users
    "maintenance_engineer", // Thinks about debugging at 3am
    "junior_developer", // Finds complexity and confusion
    "senior_architect", // Sees long-term implications
    "user_advocate", // Focuses on actual user needs
    "chaos_engineer" // Tries to break everything
  ],

  "alternatives": [5, 20], // [min, max] scales with problem complexity
  "ideation_policy": {
    "min_default": 7,
    "min_high_risk": 20,
    "diversity_check": "pairwise_semantic_similarity < 0.7",
    "regenerate_until": "all_pairs < 0.7"
  },

  // COGNITIVE BIASES that LLMs should actively counter
  "biases": [
    "dunning kruger", // Overestimating ability when inexperienced
    "confirmation", // Seeking only supporting evidence
    "anchoring", // First option dominates
    "sunk cost", // Continuing bad path due to investment
    "availability", // Memorable examples overweighted
    "recency" // Newer assumed better without proof
  ],

  // COMMON PITFALLS to check in every solution
  "pitfalls": [
    "sql injection",
    "null pointer",
    "race conditions",
    "memory leaks",
    "circular dependencies",
    "tight coupling",
    "false assumptions",
    "scope creep"
  ],

  // PRINCIPLES - Codified rules triggered by patterns
  "principles": {
    "single_responsibility": "one reason to change",
    "open_closed": "open for extension closed for modification",
    "liskov_substitution": "subclass objects replace superclass",
    "interface_segregation": "no dependency on unused methods",
    "dependency_inversion": "depend on abstractions",
    "validate_all_input": "validate at boundaries",
    "fail_fast": "detect at entry point",
    "dont_repeat_yourself": "single source of truth",
    "keep_it_simple": "simple systems work better",
    "you_arent_gonna_need_it": "implement when needed",
    "explicit_over_implicit": "explicit beats implicit",
    "do_one_thing_well": "focus beats sprawl",
    "convention_over_configuration": "sensible defaults",
    "optimize_for_programmer_happiness": "optimize for happiness",
    "wcag_compliance": "WCAG 2.2 Level AA",
    "omit_needless_words": "concise writing is strong"
  },

  // EVIDENCE FORMAT (for synthesize/select)
  "evidence_format": {
    "required_fields": ["claim", "source", "data", "confidence"],
    "confidence_guidelines": {
      "0.9-1.0": "peer-reviewed, large sample, rigorous",
      "0.7-0.9": "industry studies, expert consensus",
      "0.5-0.7": "case studies, white papers",
      "0.3-0.5": "anecdote, blog, opinion",
      "<0.3": "speculation"
    }
  },

  // DIMENSION APPLICABILITY (avoid metrics theater)
  "dimension_applicability": {
    "always_check": ["duplication", "naming", "cohesion", "ordering", "semantic_consolidation", "writing_quality", "file_sprawl", "visual_hierarchy", "aesthetics", "accessibility"],
    "code_only": ["structural_complexity", "resilience", "hoisting", "dependencies", "caching", "documentation", "performance", "security", "testing"],
    "ui_only": ["usability", "satisfaction", "engagement", "error_rate", "retention"],
    "skip_implementation": "mark N/A and skip when not applicable"
  },

  // USER INTERFACE - Brutalist design: honest, functional, no decoration
  "ui_grid_px": 8, // All spacing in 8px increments
  "ui_max_width_px": 680, // Optimal line length
  "ui_min_contrast": 4.5, // WCAG AA minimum
  "ui_min_touch_px": 44, // Accessibility minimum
  "ui_brand": "#C55D3B", // 4.6:1 contrast on background
  "ui_text": "#3D3929", // 8.9:1 contrast on background
  "ui_background": "#FFFCF7",
  "ui_forbidden": ["drop shadows", "gradients", "border radius"],

  // TOOLS (for quality gates and analysis)
  "tools": {
    "analysis": ["flog", "flay", "rubocop", "brakeman", "simplecov", "lighthouse", "axe-core", "bundle-audit", "yard", "reek", "rubycritic", "shellcheck"]
  },

  // POLICIES (apply directly; avoid planning-theater files)
  "policies": {
    "apply_directly": true,
    "never_create": ["requirements.md", "alternatives.md", "design.md", "deploy.md", "retro.md"]
  },

  // OUTPUT CONFIGURATION
  "output_format": "unified diff",
  "output_style": "quiet token efficient",
  "output_never_truncate": true,
  "output_avoid_unless_requested": ["verbose explanations", "comparison tables", "bulleted lists"],
  "output_verbose_when_asked": true
}