name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-shell:
    name: Lint Shell Scripts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Install ShellCheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
      
      - name: Lint Shell Scripts
        continue-on-error: true
        run: |
          # ShellCheck only supports bash/sh, not zsh
          # Many scripts in this repo are zsh-specific
          for file in $(find . -name "*.sh" -not -path "./.git/*"); do
            if head -1 "$file" | grep -q "zsh"; then
              echo "Skipping zsh script: $file"
            else
              echo "Checking: $file"
              shellcheck "$file" || true
            fi
          done

  lint-ruby:
    name: Lint Ruby Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: false
      
      - name: Check Ruby Syntax
        run: |
          find multimedia rails -name "*.rb" -exec ruby -c {} +

  validate-json:
    name: Validate JSON Files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Validate JSON
        run: |
          for file in $(find . -name "*.json" -not -path "./.git/*" -not -path "./node_modules/*"); do
            echo "Validating $file"
            # Skip master.json as it uses JSONC (JSON with comments)
            if [[ "$file" == "./master.json" ]]; then
              echo "Skipping master.json (JSONC format)"
              continue
            fi
            python3 -m json.tool "$file" > /dev/null || echo "Warning: $file may have issues"
          done

  validate-markdown:
    name: Validate Markdown
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Install markdownlint
        run: npm install -g markdownlint-cli
      
      - name: Lint Markdown (non-blocking)
        continue-on-error: true
        run: markdownlint '**/*.md' --ignore node_modules

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  check-secrets:
    name: Check for Secrets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
      
      - name: Gitleaks Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
